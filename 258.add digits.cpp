/*
258.各位相加[Easy]

给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。

示例:

输入: 38
输出: 2 
解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。

思路：把个位直接加到前面去，并退一位，这个数最终输出结果和原来的数字一样

时间复杂度O(n)
*/
class Solution {
public:
    int addDigits(int num) {
        while(num>=10)num=num/10+num%10;
        return num;
    }
};
/*
进阶:
你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？

不能循环就只能位运算咯，不过怎么看都不像位运算能做出来的样子（位运算是错的！！！）

思路：

假设一个数叫做abcdef（手动上划线），各位相加后得到res=a+b+c+d+e+f，这个数相比原来的数少了99999a+9999b+999c+99d+9e=9×(11111a+1111b+111c+11d+e)，是9的倍数

再多几位数也就是减少999……9×该位数，一次操作后还是减少9的倍数

所以每次操作后都是减少9的倍数

算到最后1位数之后依旧是少了9的倍数

所以原数对9取余就是结果

但有一个特殊的就是余数为0，由于每次操作都是非负数的相加，因此不会回到0

所以余数为0的要输出9

不过如果输入参数就是0，那结果还是0

*/

class Solution {
public:
    int addDigits(int num) {
        if(num==0)return 0;
        return num%9==0?9:num%9;
    }
};
