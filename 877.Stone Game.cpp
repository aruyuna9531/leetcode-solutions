/*
亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。

游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。

亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。

假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 true ，当李赢得比赛时返回 false 。

 

示例：

输入：[5,3,4,5]
输出：true
解释：
亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。
假设他取了前 5 颗，这一行就变成了 [3,4,5] 。
如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。
如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。
这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。
 

提示：

2 <= piles.length <= 500
piles.length 是偶数。
1 <= piles[i] <= 500
sum(piles) 是奇数。

思路：由于每堆石子数量是公开的，因此先手玩家可以预判什么策略可以获胜
题目条件有：只能从开头或结尾拿，且石子堆数为偶数
那么策略就是：先计算奇数堆和偶数堆的石子总和，如果奇数堆多就先手第1堆，否则先手最后一堆
然后对手每次从哪边拿，我也从哪边拿，这样子可以保证我拿的恒为奇数堆（或偶数堆），也就是预判的较多的那些堆
这样子就是先手必胜，直接返回true

如果没有piles.length是偶数这个条件，就必须使用dp
*/

class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        return true;
    }
};
