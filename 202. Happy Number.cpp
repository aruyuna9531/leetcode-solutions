/*
编写一个算法来判断一个数是不是“快乐数”。

一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。

示例: 

输入: 19
输出: true
解释: 
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

思路：找到变不到1的情况，测试9个一位数后发现只有1和7可以回到1，另外7个不会（只能回到4）
因此可以设递归，递归到输入为1和7时返回真（或者1时返回真，4时返回假）
其他二位数就按规则算到1或4(7)为止
*/
class Solution {
public:
    bool isHappy(int n) {
        if(n==1)return true;
        if(n==7)return true;
        if(n<10)return false;   //1和7是可以得到1的，其他一位数不行
        int res=0;
        while(n>0){
            res+=(n%10)*(n%10);
            n/=10;
        }
        return isHappy(res);
    }
};
